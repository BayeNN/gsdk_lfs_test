{{ autogenerated_c_header }}

#include <em_common.h>
#include "sl_btctrl_linklayer.h"
#include "sl_btctrl_config.h"

#ifdef SL_COMPONENT_CATALOG_PRESENT
#include "sl_component_catalog.h"
#endif // SL_COMPONENT_CATALOG_PRESENT

{%- for entry in bluetooth_controller_init %}
{%-   if entry["include"] is string %}
#include "{{ entry["include"] }}"
{%-   else %}
{%-     for f in entry["include"] %}
#include "{{ f }}"
{%-     endfor %}
{%-   endif %}
{%- endfor %}

{%- for entry in bluetooth_controller_feature_init %}
{%-   if entry["include"] is string %}
#include "{{ entry["include"] }}"
{%-   else %}
{%-     for f in entry["include"] %}
#include "{{ f }}"
{%-     endfor %}
{%-   endif %}
{%- endfor %}


//FIXME: cleanup these
void sl_btctrl_testhw_use(void);
SL_WEAK bool sl_btctrl_testhw_init(void)
{
  //For internal testing to bypass initialization
  return false;
}

#ifndef SL_BT_CONFIG_MAX_CONNECTIONS
#define SL_BT_CONFIG_MAX_CONNECTIONS 0
#endif
#ifndef SL_BT_CONFIG_USER_ADVERTISERS
#define SL_BT_CONFIG_USER_ADVERTISERS 0
#endif
#ifndef SL_BT_CONFIG_ACCEPT_LIST_SIZE
#define SL_BT_CONFIG_ACCEPT_LIST_SIZE 0
#endif

void sl_bt_controller_init(void)
{
  if(sl_btctrl_testhw_init() == false){
    sl_btctrl_init_mem(SL_BT_CONTROLLER_BUFFER_MEMORY);
    sl_btctrl_init_ll();
    sl_btctrl_init_basic(SL_BT_CONFIG_MAX_CONNECTIONS,SL_BT_CONFIG_USER_ADVERTISERS,SL_BT_CONFIG_ACCEPT_LIST_SIZE);
    {%- for entry in bluetooth_controller_init %}
    {%-   if entry["function"] is string %}
    {{ entry["function"] }};
    {%-   endif %}
    {%- endfor %}
  }
  {%- for entry in bluetooth_controller_feature_init %}
  {%-   if entry["function"] is string %}
  {{ entry["function"] }};
  {%-   endif %}
  {%- endfor %}
}

